-------------
TODO:
-------------
(1) Modified Cotan potential for surface sampling energy -- DONE
(2) Automatic starting regularization
(3) svd-based inverse  -- DONE
(4) Adaptive Gauss Seidel optimization (without bad moves)  -- DONE

---------------------------------------------------------------------------------------
Nov 28th, 2014 - Allowing the control of the type of the optimizer from the parameter file -- commited
---------------------------------------------------------------------------------------

(1) Added "optimizer" attribute to the optimization tag which take "jacobi" or "gauss_seidel" values
(2) Modified HasOptimizationAttribute to check for attributes other than "number_of_scales"
(3) Added to PSMProject optimizer_tag
(4) Modified HasOptimizationAttribute to check for the optimizer_tag
(5) Added GetOptimizerType function to the PSMProject
(6) Modified PSMCommandLineClass::ReadInputs to set the optimization mode of the entropy filter according to
    supplied optimizer type, default is jacobi
    
---------------------------------------------------------------------------------------
Nov 28th, 2014 - Adding Adaptive Gauss Seidel optimization (without bad moves) 
---------------------------------------------------------------------------------------

(1) Added to PSMGradientDescentOptimizer SetModeToAdaptiveGaussSeidel function (m_OptimizationMode = 2)
(2) Modified PSMCommandLineClass::ReadInputs to set optimization mode to adaptive gauss seidel according to 
    the supplied optimizer type.
(3) Modified PSMGradientDescentOptimizer::StartOptimization to trigger adaptive gauss seidel according to the 
    current optimization mode.
(4) Added to PSMGradientDescentOptimizer StartAdaptiveGaussSeidelOptimization function
(5) Added to PSMParticleEntropyFunction an Evaluate function which returns the energy
(6) Modified PSMParticleEntropyFunction::Evaluate to call the new Evaluate function with energy in order not to repeat the same code
(7) Added Energy function to PSMParticleEntropyFunction


---------------------------------------------------------------------------------------
Nov 29th, 2014 - Updating the particle entropy function to enable modified cotan potential -- commited
---------------------------------------------------------------------------------------

(1) Added "pairwise_potential" attribute to the optimization tag which take "gaussian" or "cotan" values
(2) Added to PSMProject pairwise_potential_tag
(3) Modified HasOptimizationAttribute to check for the pairwise_potential_tag
(4) Added GetPairwisePotentialType function to the PSMProject
(5) Added to PSMParticleEntropyFunction a new member variable (m_PairwisePotentialType) to switch between gaussian and cotan potentials
(6) Added the set/get functions for m_PairwisePotentialType
(7) Modified PSMCommandLineClass::ReadInputs to set the pairwise potential type of the particle entropy function
    according to the supplied potential type, default is gaussian
(8) Edited PSMParticleEntropyFunction class description to add details about the modified cotan potential
(9) Added to PSMParticleEntropyFunction functions to compute the modified cotan function and its derivative 
    their names are ComputeModifiedCotangent and ComputeModifiedCotangentDerivative, respectively.
(10) Added m_GlobalSigma to PSMParticleEntropyFunction to maintain the global sigma defined based on hexagonal packing
(11) Added m_DomainsPerShape to PSMParticleEntropyFunction to enable computing the global sigma
(12) Added the set/get functions of the m_DomainsPerShape
(13) Modified the constructor of PSMEntropyModelFilter to set domains per shape for the PSMParticleEntropyFunction
(14) Added to PSMParticleEntropyFunction EstimateGlobalSigma function
(15) Added to PSMParticleEntropyFunction typedefs related to kdtree based distance estimation for global sigma estimation
(16) Added to PSMParticleEntropyFunction the implementation of BeforeIteration to compute the global sigma given the current
     particle configuration in case of using cotan pairwise potential
(17) Modified PSMParticleEntropyFunction constructor to initiate m_GlobalSigma
(18) Modified PSMEntropyModelFilter::GenerateData to initialize the global sigma with -1 each time a split is done 
     This is to trigger the computation of the global sigma which changes when splitting the particles (a new scale).
(19) Added to PSMParticleEntropyFunction Set/Get for the m_GlobalSigma
(20) Added to PSMParticleEntropyFunction EvaluateGaussian and EvaluateCotan functions where Evaluate fuction was 
     modified to call one of them according to the pairwise potential type
     
---------------------------------------------------------------------------------------
Nov 29th, 2014 - Using svd-based matrix inverse -- commited
---------------------------------------------------------------------------------------

(1) Added "inverse_method" attribute to the optimization tag which take "svd" or "eig" values  
(2) Added to PSMProject inverse_method_tag
(3) Modified HasOptimizationAttribute to check for the inverse_method_tag
(4) Added GetInverseMethod function to the PSMProject
(5) Added to PSMShapeEntropyFunction a new member variable (m_InverseMethod) to switch between svd and eigen methods for 
    computing matrix inverse
(6) Added the set/get functions for m_InverseMethod
(7) Modified PSMCommandLineClass::ReadInputs to set the inverse method of the shape entropy function
    according to the supplied inverse method, default is eig
(8) Change ShapeEntropyFunction() in PSMEntropyModelFilter to GetShapeEntropyFunction() to maintain consistency
(9) Modified PSMShapeEntropyFunction::ComputeCovarianceMatrix to compute matrix inverse according to the supplied
    inverse method
  
---------------------------------------------------------------------------------------
Nov 29th, 2014 - Fixing some bugs -- commited
---------------------------------------------------------------------------------------

(1) Fixed a small bug related to the singular values ordering related to the svd-based inverse
(2) Moved the read of new optimization attributes to a new function named ReadInputCommonOptimizationAttributes
    added to PSMCommandLineClass to be able to read all common optimization attributes
    no matter a single or multiple scales were provided

---------------------------------------------------------------------------------------
Nov 29th, 2014 - Enabling auto initial regularization based on the eigen spectrum of the shape covariance matrix -- committed
---------------------------------------------------------------------------------------

(1) Added to PSMEntropyModelFilter a function named ComputeShapeMatrixRegularizationTerm to compute the regularization
    term of the current shape matrix, this will hold the summation of positive eigen values beyond those which
    maintain up to 97% of the shape variability in the shape space
(2) Added "regularization_initial_mode" attribute to the optimization tag which take "auto" or "manual" values  
(3) Added to PSMProject regularization_initial_mode_tag
(4) Modified HasOptimizationAttribute to check for the regularization_initial_mode_tag
(5) Added GetRegularizationInitialMode function to the PSMProject
(6) Added to PSMEntropyModelFilter a new member variable m_RegularizationInitialMode
(7) Added set/get of m_RegularizationInitialMode
(8) Modified PSMCommandLineClass::ReadInputCommonOptimizationAttributes to set the regularization mode of
    the PSMEntropyModelFilter, the default is manual
(9) Modified PSMEntropyModelFilter::GenerateData to set up the initial regularization in case auto mode was identified
    the final regularization is set to be initial/10
(10) Fixed bug: only compute the global sigma for cotan potential whenever we have a new split then stay with this


---------------------------------------------------------------------------------------
Nov 29th-30th, 2014 - Enabling user to control the shape entropy weighting  -- committed
---------------------------------------------------------------------------------------

(1) Added "shape_entropy_weight" attribute to the optimization tag which take float values
(2) Added to PSMProject shape_entropy_weight_tag
(3) Modified HasOptimizationAttribute to check for the shape_entropy_weight_tag
(4) Added GetShapeEntropyWeighting function to the PSMProject
(5) Added to PSMEntropyModelFilter a new member variable m_ShapeEntropyWeight
(6) Added set/get of m_ShapeEntropyWeight
(7) Modified PSMCommandLineClass::ReadInputCommonOptimizationAttributes to set the shape entropy weighting according to the user input,
    default is 1.0
(8) Modified PSMEntropyModelFilter::GenerateData to set up the shape entropy weighting at every scale
(9) Added to PSMShapeEntropyFunction a function to get the current correspondence energy named as GetCurrentEnergy
    in order to be able to report it on the terminal along with the Eigenmode variances

    
---------------------------------------------------------------------------------------
Nov 30th - Dec 1st, 2014 - Testing different scenarios -- committed
---------------------------------------------------------------------------------------

(1) Running box_1bumpout for different optimizers, regularization modes and pairwise potential
(2) Adding box_1bumpin dataset and testing different scenarios
(3) Modified auto regularization to start with 10 times the estimated regularization term in order
    to allow free motion during the early iterations of the splitting since coresspondence is bad initially anyway


---------------------------------------------------------------------------------------
Dec 2nd, 2014 - Weights on particle entropy, control time step and sigma is computed every iteration  -- committed
---------------------------------------------------------------------------------------

(1) Modified PSMParticleEntropyFunction::BeforeIteration to allow computing before every iteration 
    in case there is a significant change in the particles configuration
(2) Added "particle_entropy_weight" attribute to the optimization tag which take float values
    Note that if particle_entropy_weight is supplied, shape_entropy_weight will be taken to be 1.0
(3) Added to PSMProject particle_entropy_weight_tag
(4) Modified HasOptimizationAttribute to check for the particle_entropy_weight_tag
(5) Added GetParticleEntropyWeighting function to the PSMProject
(6) Added to PSMEntropyModelFilter a new member variable m_ParticleEntropyWeight
(7) Added set/get of m_ParticleEntropyWeight
(8) Modified PSMCommandLineClass::ReadInputCommonOptimizationAttributes to set the particle entropy weighting according to the user input,
    default is 1.0
(9) Added to PSMEntropyModelFilter Set/Get ParticleEntropyWeighting, this should tell the m_CostFunction which term to scale
    in order to do this, we reverse the roles of functionA and functionB in the cost function
(10) Modified PSMEntropyModelFilter::GenerateData to set up the particle entropy weighting (don't need to do this at every scale)
     This will be done during the first call of GenerateData.
(11) Added "time_step" attribute to the optimization tag which take float values
(12) Added to PSMProject time_step_tag
(13) Modified HasOptimizationAttribute to check for the time_step_tag
(14) Added GetTimeStep function to the PSMProject
(15) Modified PSMCommandLineClass::ReadInputCommonOptimizationAttributes to set the time step of the optimizer according to the user input,
    default is 1.0
    
    
---------------------------------------------------------------------------------------
Dec 2nd, 2014 - Investigating simple cases
---------------------------------------------------------------------------------------

(1) Added Torus2 which only has the DT of Torus to run my scenarios
(2) Added box_1mode which has similar image characteristics as torus    
(3) Added box_1bumpout_position2 which is constructed in a similar fashion as box_1mode
(4) Added box_2bumpout_position which is constructed in a similar fashion as box_1mode
(5) Added box_3bumpout_position which is constructed in a similar fashion as box_1mode
    
---------------------------------------------------------------------------------------
Dec 15th, 2014 - Enabling the control of procustes scaling
---------------------------------------------------------------------------------------

(1) Added "procrustes_scaling" attribute to the optimization tag which take "on", "off"
(2) Added to PSMProject procrustes_scaling_tag
(3) Modified HasOptimizationAttribute to check for the procrustes_scaling_tag
(4) Added GetProcrustesScalingFlag function to the PSMProject
(5) Modified PSMCommandLineClass::ReadInputCommonOptimizationAttributes to enable or disable procrustes scaling according to the user input 
    the default will be turning the scaling on
    
    
---------------------------------------------------------------------------------------
Dec 27th, 2014 - Fixing a bug related to reading common optimization parameters
---------------------------------------------------------------------------------------

(1) add HasCommonOptimizationAttribute to PSMProject to read common optimization parameters 
    regardless of the number of scales given
(2) modify PSMCommandLineClass::ReadInputCommonOptimizationAttributes to read common optimization
    parameters regardless of the scales
    
    
    
    